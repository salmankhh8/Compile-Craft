[
  {
    "id": "a1b2c3d4e",
    "question": "Implement a stack using an array.",
    "description": "This question asks you to implement a stack data structure using an array. A stack is a Last-In-First-Out (LIFO) data structure where elements are added and removed from the same end, traditionally referred to as the 'top' of the stack. You need to implement the basic operations of a stack, namely 'push' to add elements and 'pop' to remove elements, using an array.",
    "language": "js",
    "code": "\n          class Stack {\n              constructor() {\n                  this.items = [];\n              }\n    \n              push(element) {\n                  this.items.push(element);\n              }\n    \n              pop() {\n                  if (this.items.length === 0) {\n                      return \"Underflow\";\n                  }\n                  return this.items.pop();\n              }\n          }\n        ",
    "time": "30 minutes",
    "title": "Stack Implementation"
  },
  {
    "id": "f5g6h7i8j",
    "question": "Write a program to check if a string is a palindrome.",
    "description": "This question requires you to write a program that checks whether a given string is a palindrome or not. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). You need to implement a function that takes a string as input and returns true if it is a palindrome, and false otherwise.",
    "language": "python",
    "code": "\n          def is_palindrome(s):\n              s = s.lower()\n              return s == s[::-1]\n          ",
    "time": "40 minutes",
    "title": "Palindrome Check"
  },
  {
    "id": "k9l0m1n2o",
    "question": "Implement a queue using linked list.",
    "description": "This question asks you to implement a queue data structure using a linked list. A queue is a First-In-First-Out (FIFO) data structure where elements are added at the rear and removed from the front. You need to implement the basic operations of a queue, namely 'enqueue' to add elements and 'dequeue' to remove elements, using a linked list.",
    "language": "java",
    "code": "\n          class Node {\n              int data;\n              Node next;\n              \n              public Node(int data) {\n                  this.data = data;\n                  this.next = null;\n              }\n          }\n          \n          class Queue {\n              Node front, rear;\n              \n              public Queue() {\n                  this.front = this.rear = null;\n              }\n              \n              void enqueue(int item) {\n                  Node temp = new Node(item);\n                  if (this.rear == null) {\n                      this.front = this.rear = temp;\n                      return;\n                  }\n                  this.rear.next = temp;\n                  this.rear = temp;\n              }\n          }\n        ",
    "time": "50 minutes",
    "title": "Queue Implementation"
  },
  {
    "id": "p3q4r5s6t",
    "question": "Write a function to find the nth Fibonacci number.",
    "description": "This question requires you to write a function to find the nth Fibonacci number. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. You need to implement a function that takes an integer n as input and returns the nth Fibonacci number.",
    "language": "js",
    "code": "\n          function fibonacci(n) {\n              if (n <= 1) {\n                  return n;\n              }\n              return fibonacci(n - 1) + fibonacci(n - 2);\n          }\n        ",
    "time": "35 minutes",
    "title": "Fibonacci Series"
  },
  {
    "id": "u7v8w9x0y",
    "question": "Implement a binary tree and perform an inorder traversal.",
    "description": "This question asks you to implement a binary tree data structure and perform an inorder traversal. A binary tree is a hierarchical data structure in which each node has at most two children, referred to as the left child and the right child. In an inorder traversal, you visit the left subtree, then the current node, and finally the right subtree, recursively.",
    "language": "python",
    "code": "\n          class TreeNode:\n              def __init__(self, key):\n                  self.left = None\n                  self.right = None\n                  self.val = key\n    \n          def inorder_traversal(root):\n              if root:\n                  inorder_traversal(root.left)\n                  print(root.val, end=\" \")\n                  inorder_traversal(root.right)\n          ",
    "time": "55 minutes",
    "title": "Binary Tree and Inorder Traversal"
  },
  {
    "id": "z1a2b3c4d5e",
    "question": "Implement a linked list and reverse it.",
    "description": "This question asks you to implement a linked list data structure and reverse it. A linked list is a linear data structure where elements are stored in nodes, each containing a data field and a reference (link) to the next node in the sequence. You need to implement a function that reverses the order of the nodes in the linked list.",
    "language": "java",
    "code": "\n          class Node {\n              int data;\n              Node next;\n              \n              public Node(int data) {\n                  this.data = data;\n                  this.next = null;\n              }\n          }\n          \n          class LinkedList {\n              Node head;\n              \n              public LinkedList() {\n                  this.head = null;\n              }\n              \n              Node reverseList(Node head) {\n                  Node prev = null;\n                  Node current = head;\n                  Node next = null;\n                  while (current != null) {\n                      next = current.next;\n                      current.next = prev;\n                      prev = current;\n                      current = next;\n                  }\n                  head = prev;\n                  return head;\n              }\n          }\n        ",
    "time": "60 minutes",
    "title": "Linked List and Reversal"
  },
  {
    "id": "f6g7h8i9j0",
    "question": "Write a program to find the GCD (Greatest Common Divisor) of two numbers.",
    "description": "This question requires you to write a program to find the Greatest Common Divisor (GCD) of two numbers. The GCD of two integers is the largest positive integer that divides both numbers without leaving a remainder. You need to implement a function that takes two integers as input and returns their GCD.",
    "language": "js",
    "code": "\n          function gcd(a, b) {\n              if (b === 0) {\n                  return a;\n              }\n              return gcd(b, a % b);\n          }\n        ",
    "time": "40 minutes",
    "title": "GCD Calculation"
  },
  {
    "id": "k1l2m3n4o5p",
    "question": "Implement a hash table and handle collisions using chaining.",
    "description": "This question asks you to implement a hash table data structure and handle collisions using chaining. A hash table is a data structure that implements an associative array abstract data type, where keys are mapped to array indices using a hash function. Collisions occur when two or more keys hash to the same index. You need to implement a hash table that handles collisions by chaining.",
    "language": "python",
    "code": "\n          class HashTable:\n              def __init__(self):\n                  self.table = [[] for _ in range(10)]\n    \n              def insert(self, key, value):\n                  hash_key = hash(key) % len(self.table)\n                  key_exists = False\n                  for i, item in enumerate(self.table[hash_key]):\n                      if key == item[0]:\n                          key_exists = True\n                          break\n                  if key_exists:\n                      self.table[hash_key][i] = (key, value)\n                  else:\n                      self.table[hash_key].append((key, value))\n          ",
    "time": "50 minutes",
    "title": "Hash Table with Chaining"
  },
  {
    "id": "q6r7s8t9u0v",
    "question": "Implement a binary search tree and perform a postorder traversal.",
    "description": "This question asks you to implement a binary search tree (BST) data structure and perform a postorder traversal. A binary search tree is a binary tree in which the value of each node in the left subtree is less than the value of the node, and the value of each node in the right subtree is greater than the value of the node. In a postorder traversal, you visit the left subtree, then the right subtree, and finally the current node, recursively.",
    "language": "java",
    "code": "\n          class Node {\n              int data;\n              Node left, right;\n              \n              public Node(int item) {\n                  data = item;\n                  left = right = null;\n              }\n          }\n          \n          class BinaryTree {\n              Node root;\n              \n              public BinaryTree() {\n                  root = null;\n              }\n              \n              void postorderTraversal(Node node) {\n                  if (node != null) {\n                      postorderTraversal(node.left);\n                      postorderTraversal(node.right);\n                      System.out.print(node.data + \" \");\n                  }\n              }\n          }\n        ",
    "time": "70 minutes",
    "title": "Binary Search Tree and Postorder Traversal"
  },
  {
    "id": "w1x2y3z4a5b",
    "question": "Write a program to find the sum of all prime numbers up to a given number.",
    "description": "This question requires you to write a program that finds the sum of all prime numbers up to a given number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. You need to implement a function that takes an integer limit as input and returns the sum of all prime numbers up to that limit.",
    "language": "js",
    "code": "\n          function isPrime(num) {\n              for (let i = 2; i < num; i++) {\n                  if (num % i === 0) {\n                      return false;\n                  }\n              }\n              return num > 1;\n          }\n    \n          function sumOfPrimes(limit) {\n              let sum = 0;\n              for (let i = 2; i <= limit; i++) {\n                  if (isPrime(i)) {\n                      sum += i;\n                  }\n              }\n              return sum;\n          }\n        ",
    "time": "45 minutes",
    "title": "Sum of Prime Numbers"
  }
]
